{% extends 'base.twig' %}

{% block maincontent %}
    <div id="app">
        <hr />
        <div>
            <label for="formFileLg" class="form-label">Selecione uma ou várias imagens para enviar</label>
            <input id="images" ref="file" name="file[]" class="form-control form-control-lg" multiple="multiple" type="file">
        </div>
        <div class="d-grid gap-2 mt-3">
            <button v-on:click="postImages" class="btn btn-primary" type="button">Upload</button>
        </div>
        <br />
        <h4 class="text-white">Últimas imagens enviadas</h4>
        <div class="row">
            <div class="col-sm-12 col-md-3 col-lg-2" v-for="img in images">
                <a v-bind:href="img.image_url" data-lightbox="Imagem 000">
                    <img v-bind:src="img.image_url" width="120" class="album-img" />
                </a>
                <div class="mb-3">
                    <label for="imageUrl" class="form-label text-white">Link direto</label>
                    <input type="text" @mousedown="copy(img.image_url)" v-model="img.image_url" readonly="readonly" class="form-control" id="imageUrl">
                </div>
                <div class="mb-3">
                    <label for="imageUrl" class="form-label text-white">Bbcode</label>
                    <input type="text" @mousedown="copy(img.image_url)" v-model="img.image_url" readonly="readonly" class="form-control" id="imageUrl">
                </div>
            </div>
        </div>
        <span class="text-white">Temos um total de ${totalImages} imagens em nosso banco de dados</span>

        <div id="snackbar" style="z-index: 10000">${ snackbarMsg }</div>
        <div class='light x1'></div>
        <div class='light x2'></div>
        <div class='light x3'></div>
        <div class='light x4'></div>
        <div class='light x5'></div>
        <div class='light x6'></div>
        <div class='light x7'></div>
        <div class='light x8'></div>
        <div class='light x9'></div>
    </div>
{% endblock %}
{% block extra %}
    <script>
        new Vue({
            delimiters: ['${', '}'],
            el: '#app',
            data: {
                totalImages: 0,
                images: [],
                snackbarMsg: ''
            },
            mounted: function () {
                this.checkLogin();
                this.loadMyImages();
            },
            methods: {
                async postImages(){
                    const config = {
                        headers: {'content-type': 'multipart/form-data'}
                    }
                    const formData = new FormData();
                    for( let i = 0; i < this.$refs.file.files.length; i++ ){
                        let file = this.$refs.file.files[i];
                        formData.append('files[' + i + ']', file);
                    }

                    await axios.post('/image/upload', formData, config)
                        .then(response => {
                            this.snackbarMsg = response.data.message;
                            this.showToast();
                            localStorage.setItem('iwt-upto-user', JSON.stringify(this.user));
                        })
                        .catch(error => {
                            this.snackbarMsg = error;
                            this.showToast();
                        })
                },
                async loadMyImages(){
                    const config = {
                        headers: {'content-type': 'application/json'}
                    }

                    await axios.get('/images', config)
                        .then(response => {
                            this.images = response.data;
                            this.totalImages = this.images.length;
                        })
                        .catch(error => {
                            this.snackbarMsg = error;
                            this.showToast();
                        })
                },
                async checkLogin(){
                    const config = {
                        headers: {'content-type': 'application/json'}
                    }

                    await axios.get('/users/check', config)
                        .then(response => {
                            if(response.data.code !== '0'){
                                this.snackbarMsg = response.data.message;
                                this.showToast();
                                window.location.href = '/';
                            }else{
                                this.snackbarMsg = 'Olá, '.concat(response.data.details.username);
                                this.showToast();
                                localStorage.setItem('iwt-upto-user', JSON.stringify(response.data.details));
                            }
                        })
                        .catch(error => {
                            this.snackbarMsg = error;
                            this.showToast();
                        })
                },
                async copy(value) {
                    await navigator.clipboard.writeText(value);
                    this.snackbarMsg = 'Url copiada com sucesso!';
                    this.showToast();
                },
                showToast(){
                    // Get the snackbar DIV
                    var x = document.getElementById("snackbar");

                    // Add the "show" class to DIV
                    x.className = "show";

                    // After 3 seconds, remove the show class from DIV
                    setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
                }
            }
        })
    </script>
{% endblock %}
